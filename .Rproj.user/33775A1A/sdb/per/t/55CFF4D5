{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(readr)\nlibrary(igraph)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(plyr)\nlibrary(data.table)\nlibrary(ggmap)\nlibrary(maptools)\nlibrary(ggthemes)\nlibrary(rgeos)\nlibrary(broom)\nlibrary(gridExtra)\nlibrary(reshape2)\nlibrary(scales)\nlibrary(rgdal)\n\n# Plot themes for ggplot and ggmap to be used throughout\nplotTheme <- function(base_size = 12) {\n  theme(\n    axis.text = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    text = element_text( color = \"black\"),\n    plot.title = element_text(size = 18,colour = \"black\"),\n    plot.subtitle = element_text(face=\"italic\"),\n    plot.caption = element_text(hjust=0),\n    panel.background = element_blank(),\n    strip.background = element_rect(fill = \"grey80\", color = \"white\"),\n    strip.text = element_text(size=12),\n    plot.background = element_blank(),\n    legend.background = element_blank(),\n    legend.title = element_text(colour = \"black\", face = \"italic\"),\n    legend.text = element_text(colour = \"black\", face = \"italic\"))\n}\n\nmapTheme <- function(base_size = 12) {\n  theme(\n    text = element_text( color = \"black\"),\n    plot.title = element_text(size = 18,colour = \"black\"),\n    plot.subtitle=element_text(face=\"italic\"),\n    plot.caption=element_text(hjust=0),\n    axis.ticks = element_blank(),\n    panel.background = element_blank(),\n    panel.grid.major = element_line(\"grey80\", size = 0.1),\n    strip.text = element_text(size=12),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    strip.background = element_rect(fill = \"grey80\", color = \"white\"),\n    plot.background = element_blank(),\n    legend.background = element_blank(),\n    legend.title = element_text(colour = \"black\", face = \"italic\"),\n    legend.text = element_text(colour = \"black\", face = \"italic\"))\n}\n\n########################### Graph 1 ############################# \n# Getting All Data pertaining to WA & convert to long format\nprice <- read.csv(\"price.csv\", header = TRUE)\np1 <- na.omit(price)\np1.f<-filter(p1, State %in% c(\"WA\"))\np1.wa<-gather(p1.f, year, price, Nov.10:Jan.17,factor_key = TRUE)\n\n# Group price data by county and manipulate data\np1.wa<- p1.wa %>%\n  group_by(County)\np1.wa$Loc<-paste(p1.wa$County, p1.wa$State)\n# Code to Geocode locations and save as new file\n# for(i in 1:nrow(p1.wa))\n#   {\n#   result <- geocode(p1.wa$Loc[i], output = \"latlona\", source=\"google\")\n#   p1.wa$lon[i]<-as.numeric(result[1])\n#   p1.wa$lat[i]<-as.numeric(result[2])\n# }\n# \n# write.csv(p1.wa, \"wageo.csv\", row.names=FALSE)\nwageo <- read.csv(\"wageo.csv\", header = TRUE)\nwaCounty <- na.omit(wageo)\n# Reduce data to get the areas with highest increase in price\n# Sort Data by minimum price and group by county\nwa.min<- waCounty %>%\n  group_by(County) %>%\n  slice(which.min(price))\n# Sort data by max price and group by county\nwa.max<- waCounty %>%\n  group_by(County) %>%\n  slice(which.max(price))\n# Subtract max from min and sort by highest difference \nwa.growth<-within(merge(wa.min,wa.max,by=\"Loc\"), {\n  P <- price.y - price.x\n})[,c(\"Loc\",\"P\")]\n# Had to Geocode again\n# for(i in 1:nrow(wa.growth))\n# {\n#   result <- geocode(as.character(wa.growth$Loc[i]), output = \"latlona\", source=\"google\",override_limit = TRUE)\n#   wa.growth$long[i]<-as.numeric(result[1])\n#   wa.growth$lat[i]<-as.numeric(result[2])\n# }\n#write.csv(wa.growth, \"wageo2.csv\", row.names=FALSE)\nwageo2 <- read.csv(\"wageo2.csv\", header = TRUE)\nwac2 <- na.omit(wageo2)\n# Removing WA from Location\nwac2$Loc = substr(wac2$Loc,1,nchar(as.character(wac2$Loc))-3)\n# Create WA basic map\nstates <- map_data(\"state\")\ncounties <- map_data(\"county\")\nwa_df <- subset(states, region == \"washington\")\nwa_county <- subset(counties, region == \"washington\")\n# Cleaning/Prepping data\nwc <-subset(wa_county, select = c(group,subregion))\nwc <-unique(wc)\ncolnames(wc)[2]<-\"County\"\ncolnames(wac2)[1]<-\"County\"\nwat <- subset(wac2, select = c(County, P))\ncolnames(wa_county)[6]<-\"County\"\nwat$County<-tolower(wat$County)\n# Joining the DF by \"County\"\nwa_final <- inner_join(wa_county, wat, by = c(\"County\"), all = TRUE)\nw2 <- na.omit(wa_final)\n\n# Create the base map of WA\nwa_base <- ggplot(data = wa_df, mapping = aes(x = long, y = lat, group = group)) + \n  coord_fixed(1.3) + \n  geom_polygon(color = \"black\", fill = \"gray\") + plotTheme()\n# Add county lines\nwa_base<-wa_base + \n  geom_polygon(data = wa_county, fill = NA, color = \"white\") +\n  geom_polygon(color = \"black\", fill = NA) \n# Plotting the Graph, adding colors, labels\nwamap <- wa_base + \n  geom_polygon(data = w2, aes(fill = P), color = \"white\") + \n  geom_polygon(color = \"black\", fill = NA) +\n  scale_fill_gradient(low = \"#a3fc25\", high = \"#ff2828\", \n                      space = \"Lab\", na.value = \"grey50\", \n                      guide = \"colourbar\", trans = \"log10\",\n                      labels = scales::dollar_format(prefix = \"$\"),\n                      breaks = c(0,30,100,300,1000, 3000)) + \n  labs(title=\"Rise in price of Rent\", subtitle=\"WA by county (2010 - 2017)\", fill = \"Price\") + plotTheme()\nwamap\n\n########################### Graph 2 ############################# \n# Read in data, convert to long format, manipulate data\nppsq <- read.csv(\"pricepersqft.csv\", header = TRUE)\nppsq1 <- na.omit(ppsq)\n# Take the average of the price after combining by county and state\npps<-aggregate(ppsq1[, 7:81], list(ppsq1$County,ppsq1$State), mean)\npps <- na.omit(pps)\npps<-gather(pps, year, price, November.2010:January.2017,factor_key = TRUE)\n# Extract date in YYYY format\npps$year <- gsub(\"[^0-9]\", \"\", pps$year) \n# Create base map\nstates <- map_data(\"state\")\ncounties <- map_data(\"county\")\n\nstate <- ggplot(data = states, mapping = aes(x = long, y = lat, group = group)) + \n  coord_fixed(1.3) + \n  geom_polygon(color = \"black\", fill = \"gray\")\n\nbase <- state + \n  geom_polygon(data = counties, fill = NA, color = \"white\") +\n  geom_polygon(color = \"black\", fill = NA) \n# Convert data type to factor\ncolnames(counties)[6]<-\"Group.1\"\ncounties$Group.1 <- as.factor(counties$Group.1)\npps$Group.1<-tolower(pps$Group.1)\n\npps<-aggregate(pps[, 4], list(pps$Group.1,pps$year), mean)\n\n# Make factor levels equal in order to join two df together\ncombined <- sort(union(levels(counties$Group.1), levels(pps$Group.1)))\nn <- inner_join(mutate(counties, Group.1=factor(Group.1, levels=combined)),\n                mutate(pps, Group.1=factor(Group.1, levels=combined)))\nn$x<-as.numeric(n$x)\n# For each year, print a graph\nlapply(sort(unique(n$Group.2)), function(i) {\n  base + \n    geom_polygon(data = n[n$Group.2==i,], aes(fill = x), color = \"white\") + \n    geom_polygon(color = \"black\", fill = NA) +\n    scale_fill_gradient(\"Price/sqf\",low = \"#a3fc25\", high = \"#ff2828\", \n                        space = \"Lab\", na.value = \"grey50\", \n                        guide = \"colourbar\", trans = \"log10\",\n                        labels = scales::dollar_format(prefix = \"$\"),\n                        breaks = c(0,.5,1,2, 3)) + \n    labs(title=\"Average price per square foot by county \", subtitle=i, fill = \"Price\") + plotTheme()\n})\n\n########################### Graph 3 #############################\nsfhomes <-read.csv(\"sfhomes.csv\", header = TRUE, as.is = T)\nsfhs <- na.omit(sfhomes)\nsfhs$SaleYr <- as.factor(sfhs$SaleYr)\n\n# Plot the neighborshoods in SF\nnb <- readOGR(\"SF\", \"geo_export_6cb760e3-ca2c-47f6-9af2-01ec1009ce71\")\nplot(nb)\nbbox <- nb@bbox\n# Add some padding\nsf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005, \n             right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)\n\n# Download basemap\nbasemap <- get_stamenmap(\n  bbox = sf_bbox,\n  zoom = 13,\n  maptype = \"toner-lite\")\n\nggmap(basemap) +\n  geom_point(data = sfhs, aes(x = long, y = lat, color = SalePrice),\n                 size = 0.25, alpha = .6) + \n  facet_wrap(~SaleYr, scales = \"fixed\", ncol = 4) +\n  coord_map() +\n  mapTheme() + theme(legend.position = c(.85, .25)) +\n  scale_color_gradientn(\"Price\", \n                        colors = c(\"#e9ff00\",\"#ffff00\",\"#ffd400\",\"#ffbf00\",\"#ff9000\",\"#ff6100\",\"#ff0000\"),\n                        labels = scales::dollar_format(prefix = \"$\")) +\n  labs(title=\"San Francisco home prices\",\n       subtitle=\"2009 - 2015\")\n\n########################### Graph 4 #############################\n# Eviction Heat Map Data for SF\nevict <-read.csv(\"Eviction_Notices.csv\", header = TRUE, as.is = T)\nsfrent <-read.csv(\"sfrent.csv\", header = TRUE, as.is = T)\ne1 <- na.omit(evict)\nsfr <- na.omit(sfrent)\n# convert to numeric\ne1[,7:25]<-suppressWarnings(sapply(e1[,7:25,drop=FALSE],as.numeric))\ne1<-na.omit(e1)\n\n# Separate \"Location\" col into \"Lat\", \"Long\"\ne1<-e1 %>% extract(\"Location\", c(\"Lat\", \"Long\"), \"\\\\(([^,]+), ([^)]+)\\\\)\")\ne1$freq <- rowSums(e1[,7:25])\ne1\n\ne1[,29:30]<-suppressWarnings(sapply(e1[,29:30,drop=FALSE],as.numeric))\n\n# Plot the neighborshoods in SF\nnb <- readOGR(\"SF\", \"geo_export_6cb760e3-ca2c-47f6-9af2-01ec1009ce71\")\nplot(nb)\nbbox <- nb@bbox\n# Add some padding\nsf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005, \n             right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)\n\n# Download basemap\nbasemap <- get_stamenmap(\n  bbox = sf_bbox,\n  zoom = 13,\n  maptype = \"toner-lite\")\n\ne1<-data.frame(e1,stringsAsFactors=FALSE)\ne1\n\nsapply(e1, class)\nsfr\n\nggmap(basemap) +\n  stat_density2d(data = e1, aes(x = Long, y = Lat, fill = ..level.., alpha = ..level..),\n                 size = 0.01, bins = 16, geom = 'polygon') + \n  scale_fill_gradient(low = \"green\", high = \"red\") +\n  facet_wrap(~File.Date) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks = element_blank()) +\n  theme(legend.position=\"none\")+\n  labs(title=\"Heat Map of San Francisco Evictions\",\n       subtitle=\"1997 - 2015\")\n\n",
    "created" : 1509854082791.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3930885445",
    "id" : "55CFF4D5",
    "lastKnownWriteTime" : 1511522334,
    "last_content_update" : 1511522334342,
    "path" : "~/Dropbox/Fall 17/WebSci/lab8/zillow.R",
    "project_path" : "zillow.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}